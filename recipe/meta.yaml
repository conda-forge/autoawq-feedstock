{% set version = "0.2.9" %}
{% set kernel_version = "0.0.7" %}

{% if cuda_compiler_version != "None" %}
{% set cuda_major = environ.get("cuda_compiler_version", "11.8").split(".")[0] | int %}
{% else %}
{% set cuda_major = 0 %}
{% endif %}

{% if python_min is undefined %}
{% set python_min = "3.9" %}
{% endif %}

package:
  name: autoawq-split
  version: {{ version }}

source:
  - url: https://github.com/casper-hansen/AutoAWQ/archive/refs/tags/v{{ version }}.tar.gz
    sha256: 2036eefb582ecc6e8889ba5ad7205bb4c4b66cbfe8f30f1d7694cdd12ff12d18
  - url: https://github.com/casper-hansen/AutoAWQ_kernels/archive/refs/tags/v{{ kernel_version }}.tar.gz
    sha256: bae8d0fe5a2aff5112c3270fa2d5a6312d5d5693c214d7174b7ff42d595eb0b9
    folder: kernels

build:
  number: 1
  # pytorch in conda-forge doesn't support CUDA 11.8 since v2.5 anymore
  skip: true  # [cuda_compiler_version in ("None", "11.8")]
  skip: true  # [osx or win]

# break CI jobs per python version
requirements:
  host:
    - python

outputs:
  - name: autoawq_kernels
    version: {{ kernel_version }}
    build:
      activate_in_script: true
      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
      script:
        - sed -i 's/os.environ\["CC"\] = "g++"//' kernels/setup.py
        - sed -i 's/os.environ\["CXX"\] = "g++"//' kernels/setup.py
        - cd kernels
        - {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation

    requirements:
      build:
        - cmake
        - make
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
      host:
        - python
        - pip
        - setuptools
        - pytorch
        {% if cuda_major >= 12 %}
        - cuda-version {{ cuda_compiler_version }}
        - cuda-cudart-dev
        - libcublas-dev
        - libcusolver-dev
        - libcusparse-dev
        {% endif %}
    test:
      imports:
        - awq_ext

  - name: autoawq
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
      script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
    requirements:
      build:
      host:
        - python
        - {{ pin_subpackage('autoawq_kernels', exact=True) }}
        - packaging
        - setuptools >=49.4.0
        - pytorch
        - wheel
        - pip
        - requests
        - libxcrypt
        {% if cuda_major >= 12 %}
        - cuda-version {{ cuda_compiler_version }}
        {% endif %}
      run:
        - python
        - {{ pin_subpackage('autoawq_kernels', exact=True) }}
        - accelerate
        - datasets
        - tokenizers >=0.12.1
        - transformers >=4.35.0
        - typing_extensions >=4.8
        - zstandard
    test:
      imports:
        - awq
      requires:
        - pip
      commands:
        # pending https://github.com/conda-forge/tcolorpy-feedstock/issues/12
        # - pip check

  - name: autoawq-eval
    build:
      noarch: python
      # noarch builds only for python_min; needs to match the variant config here
      {% if py != python_min.replace(".", "") %}
      skip: true
      {% endif %}
    requirements:
      host:
        - python {{ python_min }}.*
        - autoawq =={{ version }}=*_{{ PKG_BUILDNUM }}
      run:
        - python >={{ python_min }}
        - autoawq =={{ version }}=*_{{ PKG_BUILDNUM }}
        - evaluate
        - lm_eval ==0.4.1
        - protobuf
        - scipy
        - tabulate
    test:
      commands:
        - echo "pure metapackage"

about:
  home: https://github.com/casper-hansen/AutoAWQ
  summary: AutoAWQ is an easy-to-use package for 4-bit quantized models.
  license: MIT
  license_file: LICENSE

extra:
  recipe-maintainers:
    - mediocretech
    - h-vetinari
  feedstock-name: autoawq
